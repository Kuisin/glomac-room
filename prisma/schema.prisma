generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Resv {
  id          Int        @id @default(autoincrement())
  timestamp   DateTime   @default(now()) @db.Timestamptz
  title       String     @default("unknown")
  startTime   DateTime   @db.Timestamptz
  endTime     DateTime   @db.Timestamptz
  description String?
  roomId      Int
  userId      Int?
  status      ResvStatus @default(PENDING)
  group       String?    @default("none")
  type        ResvType   @default(USER)
  room        Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([userId])
  @@index([startTime])
  @@index([endTime])
}

model University {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  areas       Area[]
  Facilities  Facility[]
  rooms       Room[]
  owner       User             @relation("OwnerRelation", fields: [ownerId], references: [id])
  users       UserUniversity[]
}

model Area {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  universityId Int
  universties  University @relation(fields: [universityId], references: [id])
  facilities   Facility[]

  @@index([universityId])
}

model Facility {
  id           Int        @id @default(autoincrement())
  name         String
  floors       String[]
  description  String?
  areaId       Int?
  universityId Int
  areas        Area?      @relation(fields: [areaId], references: [id])
  Universities University @relation(fields: [universityId], references: [id])
  rooms        Room[]

  @@index([universityId])
  @@index([areaId])
}

model Room {
  id           Int        @id @default(autoincrement())
  facilityId   Int
  floor        String
  name         String
  capacity     Int?
  location     String?
  description  String?
  valid        RoomValid  @default(DISABLE)
  universityId Int
  resv         Resv[]
  facility     Facility   @relation(fields: [facilityId], references: [id])
  universities University @relation(fields: [universityId], references: [id])

  @@index([universityId])
  @@index([facilityId])
}

model User {
  id              Int              @id @default(autoincrement())
  role            String
  studentId       String?
  email           String?
  lastName        String
  firstName       String
  displayName     String
  valid           Boolean          @default(false)
  showProfile     Boolean          @default(false)
  reservations    Resv[]
  ownerUniversity University[]     @relation("OwnerRelation")
  universities    UserUniversity[]
}

model UserUniversity {
  userId       Int
  universityId Int
  university   University @relation(fields: [universityId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, universityId])
}

enum ResvStatus {
  PRE_REQUEST
  PENDING
  CONFIRMED
  CANCELLED
  UPDATED
  COMPLETED
}

enum ResvType {
  COURSE
  FORCE
  USER
}

enum RoomValid {
  DISABLE
  VIEW
  ALLOW
}

enum UserRole {
  STUDENT
  TEACHER
  OFFICE
  ADMIN
}
